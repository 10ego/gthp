// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
)

const getParentOrg = `-- name: GetParentOrg :many
WITH RECURSIVE orgs_q as
(
	select id, name, parent_id
	from organizations o
	where o.name = $1 
	UNION ALL
select p.id, p.name, p.parent_id
from organizations p
INNER JOIN orgs_q q ON o.id = q.parent_id 
)
select id, name, parent_id from orgs_q
`

type GetParentOrgRow struct {
	ID       string
	Name     string
	ParentID sql.NullString
}

func (q *Queries) GetParentOrg(ctx context.Context, name string) ([]GetParentOrgRow, error) {
	rows, err := q.db.QueryContext(ctx, getParentOrg, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetParentOrgRow{}
	for rows.Next() {
		var i GetParentOrgRow
		if err := rows.Scan(&i.ID, &i.Name, &i.ParentID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
